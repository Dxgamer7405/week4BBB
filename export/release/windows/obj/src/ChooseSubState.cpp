// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_ChooseSubState
#include <ChooseSubState.h>
#endif
#ifndef INCLUDED_Controls
#include <Controls.h>
#endif
#ifndef INCLUDED_FreeplayState
#include <FreeplayState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_MusicBeatSubstate
#include <MusicBeatSubstate.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayerSettings
#include <PlayerSettings.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_FlxSubState
#include <flixel/FlxSubState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxAction
#include <flixel/input/actions/FlxAction.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionDigital
#include <flixel/input/actions/FlxActionDigital.h>
#endif
#ifndef INCLUDED_flixel_input_actions_FlxActionSet
#include <flixel/input/actions/FlxActionSet.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_bbbe7573d69ec70b_20_new,"ChooseSubState","new",0x7e952b7a,"ChooseSubState.new","ChooseSubState.hx",20,0x1d446136)
HX_LOCAL_STACK_FRAME(_hx_pos_bbbe7573d69ec70b_27_create,"ChooseSubState","create",0xd4087822,"ChooseSubState.create","ChooseSubState.hx",27,0x1d446136)
static const int _hx_array_data_198fa688_2[] = {
	(int)0,(int)1,
};
HX_LOCAL_STACK_FRAME(_hx_pos_bbbe7573d69ec70b_49_update,"ChooseSubState","update",0xdefe972f,"ChooseSubState.update","ChooseSubState.hx",49,0x1d446136)

void ChooseSubState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_bbbe7573d69ec70b_20_new)
HXLINE(  23)		this->curSelected = 1;
HXLINE(  20)		super::__construct();
            	}

Dynamic ChooseSubState_obj::__CreateEmpty() { return new ChooseSubState_obj; }

void *ChooseSubState_obj::_hx_vtable = 0;

Dynamic ChooseSubState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ChooseSubState_obj > _hx_result = new ChooseSubState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ChooseSubState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x5661ffbf) {
			if (inClassId<=(int)0x22b931ac) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x22b931ac;
			} else {
				return inClassId==(int)0x5661ffbf;
			}
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7fce3ab0;
		}
	}
}

void ChooseSubState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_bbbe7573d69ec70b_27_create)
HXLINE(  28)		this->super::create();
HXLINE(  30)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(::flixel::FlxG_obj::width,::flixel::FlxG_obj::height,-16777216,null(),null());
HXLINE(  31)		bg->set_alpha(( (Float)(0) ));
HXLINE(  32)		bg->scrollFactor->set(null(),null());
HXLINE(  33)		this->add(bg);
HXLINE(  35)		 ::flixel::FlxSprite selectorImage =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,null());
HXDLIN(  35)		::String library = null();
HXDLIN(  35)		 ::flixel::FlxSprite selectorImage1 = selectorImage->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("bigChungus",27,60,f3,42)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),true,415,415,null(),null());
HXLINE(  36)		selectorImage1->set_antialiasing(true);
HXLINE(  37)		selectorImage1->animation->add(HX_("base",11,e8,10,41),::Array_obj< int >::fromData( _hx_array_data_198fa688_2,2),0,false,false,null());
HXLINE(  38)		selectorImage1->set_alpha(( (Float)(0) ));
HXLINE(  39)		selectorImage1->scrollFactor->set(null(),null());
HXLINE(  40)		this->add(selectorImage1);
HXLINE(  41)		selectorImage1->animation->play(HX_("base",11,e8,10,41),null(),null(),null());
HXLINE(  43)		::flixel::tweens::FlxTween_obj::tween(bg, ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("alpha",5e,a7,96,21),((Float)0.6))),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
HXLINE(  44)		::flixel::tweens::FlxTween_obj::tween(selectorImage1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("y",79,00,00,00),20)
            			->setFixed(1,HX_("alpha",5e,a7,96,21),1)),((Float)0.4), ::Dynamic(::hx::Anon_obj::Create(1)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::quartInOut_dyn())));
            	}


void ChooseSubState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_bbbe7573d69ec70b_49_update)
HXLINE(  50)		this->super::update(elapsed);
HXLINE(  52)		bool leftP = ::PlayerSettings_obj::player1->controls->_leftP->check();
HXLINE(  53)		bool rightP = ::PlayerSettings_obj::player1->controls->_rightP->check();
HXLINE(  54)		bool accepted = ::PlayerSettings_obj::player1->controls->_accept->check();
HXLINE(  56)		if (leftP) {
HXLINE(  58)			 ::ChooseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  58)			_hx_tmp->curSelected = (_hx_tmp->curSelected - 1);
            		}
            		else {
HXLINE(  60)			if (rightP) {
HXLINE(  62)				 ::ChooseSubState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN(  62)				_hx_tmp->curSelected = (_hx_tmp->curSelected + 1);
            			}
            		}
HXLINE(  64)		if ((this->curSelected == 1)) {
HXLINE(  65)			this->selectorImage->animation->_curAnim->set_curFrame(0);
            		}
            		else {
HXLINE(  67)			this->selectorImage->animation->_curAnim->set_curFrame(1);
            		}
HXLINE(  69)		if (::PlayerSettings_obj::player1->controls->_back->check()) {
HXLINE(  71)			this->close();
            		}
HXLINE(  73)		if (accepted) {
HXLINE(  75)			 ::flixel::FlxState nextState =  ::FreeplayState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  75)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  75)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}



::hx::ObjectPtr< ChooseSubState_obj > ChooseSubState_obj::__new() {
	::hx::ObjectPtr< ChooseSubState_obj > __this = new ChooseSubState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< ChooseSubState_obj > ChooseSubState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	ChooseSubState_obj *__this = (ChooseSubState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ChooseSubState_obj), true, "ChooseSubState"));
	*(void **)__this = ChooseSubState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

ChooseSubState_obj::ChooseSubState_obj()
{
}

void ChooseSubState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ChooseSubState);
	HX_MARK_MEMBER_NAME(curSelected,"curSelected");
	HX_MARK_MEMBER_NAME(selectorImage,"selectorImage");
	 ::flixel::FlxSubState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ChooseSubState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(curSelected,"curSelected");
	HX_VISIT_MEMBER_NAME(selectorImage,"selectorImage");
	 ::flixel::FlxSubState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ChooseSubState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { return ::hx::Val( curSelected ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorImage") ) { return ::hx::Val( selectorImage ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ChooseSubState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 11:
		if (HX_FIELD_EQ(inName,"curSelected") ) { curSelected=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"selectorImage") ) { selectorImage=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ChooseSubState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("curSelected",fb,eb,ab,32));
	outFields->push(HX_("selectorImage",bc,ab,80,ec));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ChooseSubState_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(ChooseSubState_obj,curSelected),HX_("curSelected",fb,eb,ab,32)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(ChooseSubState_obj,selectorImage),HX_("selectorImage",bc,ab,80,ec)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ChooseSubState_obj_sStaticStorageInfo = 0;
#endif

static ::String ChooseSubState_obj_sMemberFields[] = {
	HX_("curSelected",fb,eb,ab,32),
	HX_("selectorImage",bc,ab,80,ec),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class ChooseSubState_obj::__mClass;

void ChooseSubState_obj::__register()
{
	ChooseSubState_obj _hx_dummy;
	ChooseSubState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("ChooseSubState",88,a6,8f,19);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ChooseSubState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ChooseSubState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ChooseSubState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ChooseSubState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

