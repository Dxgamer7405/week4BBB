// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_Alphabet
#include <Alphabet.h>
#endif
#ifndef INCLUDED_DialogueBox
#include <DialogueBox.h>
#endif
#ifndef INCLUDED_LoadingState
#include <LoadingState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_VideoState
#include <VideoState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimation
#include <flixel/animation/FlxAnimation.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxBaseAnimation
#include <flixel/animation/FlxBaseAnimation.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxAtlasFrames
#include <flixel/graphics/frames/FlxAtlasFrames.h>
#endif
#ifndef INCLUDED_flixel_graphics_frames_FlxFramesCollection
#include <flixel/graphics/frames/FlxFramesCollection.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedSpriteGroup
#include <flixel/group/FlxTypedSpriteGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_text_FlxTextBorderStyle
#include <flixel/text/FlxTextBorderStyle.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_flixel_util__FlxColor_FlxColor_Impl_
#include <flixel/util/_FlxColor/FlxColor_Impl_.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_media_SoundChannel
#include <openfl/media/SoundChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_17_new,"DialogueBox","new",0x1f391625,"DialogueBox.new","DialogueBox.hx",17,0x0149b4eb)
HX_DEFINE_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_114_new,"DialogueBox","new",0x1f391625,"DialogueBox.new","DialogueBox.hx",114,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_218_update,"DialogueBox","update",0x23306964,"DialogueBox.update","DialogueBox.hx",218,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_260_update,"DialogueBox","update",0x23306964,"DialogueBox.update","DialogueBox.hx",260,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_270_update,"DialogueBox","update",0x23306964,"DialogueBox.update","DialogueBox.hx",270,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_293_startDialogue,"DialogueBox","startDialogue",0x59859d9f,"DialogueBox.startDialogue","DialogueBox.hx",293,0x0149b4eb)
HX_LOCAL_STACK_FRAME(_hx_pos_abff9fa8c13cc7a0_521_cleanDialog,"DialogueBox","cleanDialog",0x0fc249f6,"DialogueBox.cleanDialog","DialogueBox.hx",521,0x0149b4eb)

void DialogueBox_obj::__construct(::hx::Null< bool >  __o_talkingRight,::Array< ::String > dialogueList){
            		bool talkingRight = __o_talkingRight.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_17_new)
HXLINE( 290)		this->isEnding = false;
HXLINE( 215)		this->dialogueStarted = false;
HXLINE( 214)		this->dialogueOpened = false;
HXLINE(  39)		this->noMore = false;
HXLINE(  24)		this->dialogueList = ::Array_obj< ::String >::__new(0);
HXLINE(  21)		this->curCharacter = HX_("",00,00,00,00);
HXLINE(  42)		 ::DialogueBox _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  44)		super::__construct(null(),null(),null());
HXLINE(  46)		::String _hx_switch_0 = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
            		if (  (_hx_switch_0==HX_("baby-blue",31,ec,0e,e3)) ){
HXLINE(  59)			if (::PlayState_obj::isStoryMode) {
HXLINE(  60)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  60)				::String library = null();
HXDLIN(  60)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("babytheme",f3,0c,74,c8)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  61)				{
HXLINE(  61)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  61)					 ::Dynamic onComplete = null();
HXDLIN(  61)					if (::hx::IsNull( _this->_channel )) {
HXLINE(  61)						_this->play(null(),null(),null());
            					}
HXDLIN(  61)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  61)						_this->fadeTween->cancel();
            					}
HXDLIN(  61)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            			}
HXLINE(  59)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("baby-bob",3e,94,70,9f)) ){
HXLINE(  71)			if (::PlayState_obj::isStoryMode) {
HXLINE(  72)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  72)				::String library = null();
HXDLIN(  72)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("bobdialogue",0d,68,6d,1d)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  73)				{
HXLINE(  73)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  73)					 ::Dynamic onComplete = null();
HXDLIN(  73)					if (::hx::IsNull( _this->_channel )) {
HXLINE(  73)						_this->play(null(),null(),null());
            					}
HXDLIN(  73)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  73)						_this->fadeTween->cancel();
            					}
HXDLIN(  73)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            			}
HXLINE(  71)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("insignificance",e8,a5,8a,7b)) ){
HXLINE(  81)			if (::PlayState_obj::isStoryMode) {
HXLINE(  83)				if ((::PlayState_obj::videoDialogue == 1)) {
HXLINE(  85)					::PlayState_obj::noBlackShit = true;
HXLINE(  86)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  86)					::String library = null();
HXDLIN(  86)					_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("LunchboxScary",57,33,01,24)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  87)					{
HXLINE(  87)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  87)						 ::Dynamic onComplete = null();
HXDLIN(  87)						if (::hx::IsNull( _this->_channel )) {
HXLINE(  87)							_this->play(null(),null(),null());
            						}
HXDLIN(  87)						if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  87)							_this->fadeTween->cancel();
            						}
HXDLIN(  87)						_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            					}
            				}
            				else {
HXLINE(  91)					 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  91)					::String library = null();
HXDLIN(  91)					_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("bobcreature",b4,e0,d9,a1)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  92)					{
HXLINE(  92)						 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  92)						 ::Dynamic onComplete = null();
HXDLIN(  92)						if (::hx::IsNull( _this->_channel )) {
HXLINE(  92)							_this->play(null(),null(),null());
            						}
HXDLIN(  92)						if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  92)							_this->fadeTween->cancel();
            						}
HXDLIN(  92)						_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            					}
            				}
            			}
HXLINE(  81)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("just-like-you",2a,de,a1,45)) ){
HXLINE(  76)			if (::PlayState_obj::isStoryMode) {
HXLINE(  77)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  77)				::String library = null();
HXDLIN(  77)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("bobdialogue",0d,68,6d,1d)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  78)				{
HXLINE(  78)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  78)					 ::Dynamic onComplete = null();
HXDLIN(  78)					if (::hx::IsNull( _this->_channel )) {
HXLINE(  78)						_this->play(null(),null(),null());
            					}
HXDLIN(  78)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  78)						_this->fadeTween->cancel();
            					}
HXDLIN(  78)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            			}
HXLINE(  76)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("kidz-bop",aa,9a,ff,4e)) ){
HXLINE(  54)			if (::PlayState_obj::isStoryMode) {
HXLINE(  55)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  55)				::String library = null();
HXDLIN(  55)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("babytheme",f3,0c,74,c8)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  56)				{
HXLINE(  56)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  56)					 ::Dynamic onComplete = null();
HXDLIN(  56)					if (::hx::IsNull( _this->_channel )) {
HXLINE(  56)						_this->play(null(),null(),null());
            					}
HXDLIN(  56)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  56)						_this->fadeTween->cancel();
            					}
HXDLIN(  56)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            			}
HXLINE(  54)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("nap-time",bd,58,4c,53)) ){
HXLINE(  49)			if (::PlayState_obj::isStoryMode) {
HXLINE(  50)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  50)				::String library = null();
HXDLIN(  50)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("babytheme",f3,0c,74,c8)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  51)				{
HXLINE(  51)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  51)					 ::Dynamic onComplete = null();
HXDLIN(  51)					if (::hx::IsNull( _this->_channel )) {
HXLINE(  51)						_this->play(null(),null(),null());
            					}
HXDLIN(  51)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  51)						_this->fadeTween->cancel();
            					}
HXDLIN(  51)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            			}
HXLINE(  49)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("trackstar",dd,13,0d,4d)) ){
HXLINE(  64)			if (::PlayState_obj::isStoryMode) {
HXLINE(  65)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  65)				::String library = null();
HXDLIN(  65)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("bloop",c6,7f,fc,b4)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  66)				{
HXLINE(  66)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  66)					 ::Dynamic onComplete = null();
HXDLIN(  66)					if (::hx::IsNull( _this->_channel )) {
HXLINE(  66)						_this->play(null(),null(),null());
            					}
HXDLIN(  66)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  66)						_this->fadeTween->cancel();
            					}
HXDLIN(  66)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            			}
HXLINE(  64)			goto _hx_goto_0;
            		}
            		if (  (_hx_switch_0==HX_("tutorial",9e,8f,b5,82)) ){
HXLINE(  68)			goto _hx_goto_0;
            		}
            		/* default */{
HXLINE(  96)			if (::PlayState_obj::isStoryMode) {
HXLINE(  97)				 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  97)				::String library = null();
HXDLIN(  97)				_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("boomer",58,7d,25,62)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),library),((Float)0.485),null(),null());
HXLINE(  98)				{
HXLINE(  98)					 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN(  98)					 ::Dynamic onComplete = null();
HXDLIN(  98)					if (::hx::IsNull( _this->_channel )) {
HXLINE(  98)						_this->play(null(),null(),null());
            					}
HXDLIN(  98)					if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE(  98)						_this->fadeTween->cancel();
            					}
HXDLIN(  98)					_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),((Float)0.8),1, ::Dynamic(::hx::Anon_obj::Create(1)
            						->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            				}
            			}
            		}
            		_hx_goto_0:;
HXLINE( 102)		 ::flixel::FlxSprite _hx_tmp =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-200,-200,null());
HXDLIN( 102)		int _hx_tmp1 = ::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)1.3)));
HXDLIN( 102)		this->bgFade = _hx_tmp->makeGraphic(_hx_tmp1,::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::height) ) * ((Float)1.3))),-4988968,null(),null());
HXLINE( 103)		this->bgFade->scrollFactor->set(null(),null());
HXLINE( 104)		this->bgFade->set_alpha(( (Float)(0) ));
HXLINE( 105)		this->add(this->bgFade);
HXLINE( 107)		if ((::PlayState_obj::noBlackShit = true)) {
HXLINE( 109)			this->bgFade->set_visible(false);
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DialogueBox,_gthis) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer tmr){
            				HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_114_new)
HXLINE( 115)				{
HXLINE( 115)					 ::flixel::FlxSprite _g = _gthis->bgFade;
HXDLIN( 115)					_g->set_alpha((_g->alpha + ((Float)0.13999999999999999)));
            				}
HXLINE( 116)				if ((_gthis->bgFade->alpha > ((Float)0.7))) {
HXLINE( 117)					_gthis->bgFade->set_alpha(((Float)0.7));
            				}
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 113)			 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.83), ::Dynamic(new _hx_Closure_0(_gthis)),5);
            		}
HXLINE( 121)		this->box =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-20,45,null());
HXLINE( 123)		bool hasDialog = false;
HXLINE( 124)		{
HXLINE( 124)			::String _g = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN( 124)			::String _hx_switch_1 = _g;
            			if (  (_hx_switch_1==HX_("baby-blue",31,ec,0e,e3)) ){
HXLINE( 141)				hasDialog = true;
HXLINE( 142)				 ::flixel::FlxSprite _hx_tmp = this->box;
HXDLIN( 142)				::String library = null();
HXDLIN( 142)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 142)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 143)				this->box->animation->addByPrefix(HX_("normalOpen",91,41,38,70),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 144)				this->box->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 145)				 ::flixel::FlxSprite _hx_tmp2 = this->box;
HXDLIN( 145)				_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->box->get_width() * ((Float)0.9))),null());
HXLINE( 146)				 ::flixel::FlxSprite _hx_tmp3 = this->box;
HXDLIN( 146)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 146)				_hx_tmp3->set_y(((( (Float)(_hx_tmp4) ) - this->box->get_height()) - ( (Float)(20) )));
HXLINE( 140)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_1==HX_("kidz-bop",aa,9a,ff,4e)) ){
HXLINE( 127)				hasDialog = true;
HXLINE( 128)				 ::flixel::FlxSprite _hx_tmp = this->box;
HXDLIN( 128)				::String library = null();
HXDLIN( 128)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 128)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 129)				this->box->animation->addByPrefix(HX_("normalOpen",91,41,38,70),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 130)				this->box->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 131)				 ::flixel::FlxSprite _hx_tmp2 = this->box;
HXDLIN( 131)				_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->box->get_width() * ((Float)0.9))),null());
HXLINE( 132)				 ::flixel::FlxSprite _hx_tmp3 = this->box;
HXDLIN( 132)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 132)				_hx_tmp3->set_y(((( (Float)(_hx_tmp4) ) - this->box->get_height()) - ( (Float)(20) )));
HXLINE( 126)				goto _hx_goto_1;
            			}
            			if (  (_hx_switch_1==HX_("nap-time",bd,58,4c,53)) ){
HXLINE( 134)				hasDialog = true;
HXLINE( 135)				 ::flixel::FlxSprite _hx_tmp = this->box;
HXDLIN( 135)				::String library = null();
HXDLIN( 135)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 135)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 136)				this->box->animation->addByPrefix(HX_("normalOpen",91,41,38,70),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 137)				this->box->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 138)				 ::flixel::FlxSprite _hx_tmp2 = this->box;
HXDLIN( 138)				_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->box->get_width() * ((Float)0.9))),null());
HXLINE( 139)				 ::flixel::FlxSprite _hx_tmp3 = this->box;
HXDLIN( 139)				int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 139)				_hx_tmp3->set_y(((( (Float)(_hx_tmp4) ) - this->box->get_height()) - ( (Float)(20) )));
HXLINE( 133)				goto _hx_goto_1;
            			}
            			/* default */{
HXLINE( 147)				::String defualt = _g;
HXDLIN( 147)				{
HXLINE( 148)					hasDialog = true;
HXLINE( 149)					 ::flixel::FlxSprite _hx_tmp = this->box;
HXDLIN( 149)					::String library = null();
HXDLIN( 149)					::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 149)					_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("speech_bubble_talking_baby",35,58,5a,1f)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 150)					this->box->animation->addByPrefix(HX_("normalOpen",91,41,38,70),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 151)					this->box->animation->addByPrefix(HX_("normal",27,72,69,30),HX_("Speech Bubble Normal Open",0d,59,3f,7c),24,false,null(),null());
HXLINE( 152)					 ::flixel::FlxSprite _hx_tmp2 = this->box;
HXDLIN( 152)					_hx_tmp2->setGraphicSize(::Std_obj::_hx_int((this->box->get_width() * ((Float)0.9))),null());
HXLINE( 153)					 ::flixel::FlxSprite _hx_tmp3 = this->box;
HXDLIN( 153)					int _hx_tmp4 = ::flixel::FlxG_obj::height;
HXDLIN( 153)					_hx_tmp3->set_y(((( (Float)(_hx_tmp4) ) - this->box->get_height()) - ( (Float)(20) )));
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE( 156)		this->dialogueList = dialogueList;
HXLINE( 158)		if (!(hasDialog)) {
HXLINE( 159)			return;
            		}
HXLINE( 161)		this->portraitLeft =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,-20,40,null());
HXLINE( 162)		this->add(this->portraitLeft);
HXLINE( 163)		this->portraitLeft->set_visible(false);
HXLINE( 166)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c))) {
HXLINE( 168)			 ::flixel::FlxSprite face =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,320,170,null());
HXDLIN( 168)			::String library = null();
HXDLIN( 168)			 ::flixel::FlxSprite face1 = face->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("weeb/spiritFaceForward",93,1c,29,2a)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library),null(),null(),null(),null(),null());
HXLINE( 169)			face1->setGraphicSize(::Std_obj::_hx_int((face1->get_width() * ( (Float)(6) ))),null());
HXLINE( 170)			this->add(face1);
            		}
HXLINE( 173)		this->portraitRight =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,40,null());
HXLINE( 174)		this->add(this->portraitRight);
HXLINE( 175)		this->portraitRight->set_visible(false);
HXLINE( 177)		this->box->animation->play(HX_("normalOpen",91,41,38,70),null(),null(),null());
HXLINE( 178)		this->box->updateHitbox();
HXLINE( 179)		this->add(this->box);
HXLINE( 181)		this->box->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 185)		bool _hx_tmp2 = !(talkingRight);
HXLINE( 190)		this->swagDialogue =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(240) ),( (Float)(500) ),::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6))),HX_("",00,00,00,00),32,null());
HXLINE( 191)		this->swagDialogue->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),40,-16777216,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 192)		this->dropText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,242,502,::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6))),HX_("",00,00,00,00),32,null());
HXLINE( 193)		this->dropText->setFormat((HX_("assets/fonts/",37,ff,a5,9c) + HX_("vcr.ttf",9d,d2,a7,82)),40,-16777216,HX_("left",07,08,b0,47),null(),null(),null());
HXLINE( 195)		bool _hx_tmp3;
HXDLIN( 195)		bool _hx_tmp4;
HXDLIN( 195)		if ((( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() != HX_("senpai",3c,df,8d,6b))) {
HXLINE( 195)			_hx_tmp4 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("roses",04,6c,64,ed));
            		}
            		else {
HXLINE( 195)			_hx_tmp4 = true;
            		}
HXDLIN( 195)		if (!(_hx_tmp4)) {
HXLINE( 195)			_hx_tmp3 = (( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase() == HX_("thorns",9c,bf,c7,8c));
            		}
            		else {
HXLINE( 195)			_hx_tmp3 = true;
            		}
HXDLIN( 195)		if (_hx_tmp3) {
HXLINE( 196)			this->dropText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,242,502,::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6))),HX_("",00,00,00,00),32,null());
HXLINE( 197)			this->dropText->set_font(HX_("Pixel Arial 11 Bold",ae,17,c6,45));
HXLINE( 198)			this->dropText->set_color(-2583404);
HXLINE( 200)			this->swagDialogue =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(240) ),( (Float)(500) ),::Std_obj::_hx_int((( (Float)(::flixel::FlxG_obj::width) ) * ((Float)0.6))),HX_("",00,00,00,00),32,null());
HXLINE( 201)			this->swagDialogue->set_font(HX_("Pixel Arial 11 Bold",ae,17,c6,45));
HXLINE( 202)			this->swagDialogue->set_color(-12640223);
HXLINE( 203)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 203)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),((Float)0.6),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 203)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
            		}
HXLINE( 206)		this->add(this->dropText);
HXLINE( 207)		this->add(this->swagDialogue);
HXLINE( 209)		this->dialogue =  ::Alphabet_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(80) ),HX_("",00,00,00,00),false,true,null());
            	}

Dynamic DialogueBox_obj::__CreateEmpty() { return new DialogueBox_obj; }

void *DialogueBox_obj::_hx_vtable = 0;

Dynamic DialogueBox_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< DialogueBox_obj > _hx_result = new DialogueBox_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool DialogueBox_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x288ce903) {
			if (inClassId<=(int)0x04b35cb7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x04b35cb7;
			} else {
				return inClassId==(int)0x288ce903;
			}
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void DialogueBox_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_218_update)
HXLINE( 217)		 ::DialogueBox _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 219)		this->dropText->set_text(this->swagDialogue->text);
HXLINE( 221)		if (::hx::IsNotNull( this->box->animation->_curAnim )) {
HXLINE( 223)			bool _hx_tmp;
HXDLIN( 223)			if ((this->box->animation->_curAnim->name == HX_("normalOpen",91,41,38,70))) {
HXLINE( 223)				_hx_tmp = this->box->animation->_curAnim->finished;
            			}
            			else {
HXLINE( 223)				_hx_tmp = false;
            			}
HXDLIN( 223)			if (_hx_tmp) {
HXLINE( 225)				this->dialogueOpened = true;
            			}
            		}
HXLINE( 229)		bool _hx_tmp;
HXDLIN( 229)		if (this->dialogueOpened) {
HXLINE( 229)			_hx_tmp = !(this->dialogueStarted);
            		}
            		else {
HXLINE( 229)			_hx_tmp = false;
            		}
HXDLIN( 229)		if (_hx_tmp) {
HXLINE( 231)			this->startDialogue();
HXLINE( 232)			this->dialogueStarted = true;
            		}
HXLINE( 235)		bool _hx_tmp1;
HXDLIN( 235)		bool _hx_tmp2;
HXDLIN( 235)		if (( ( ::flixel::input::FlxBaseKeyList)(::flixel::FlxG_obj::keys->justPressed) )->get_ANY()) {
HXLINE( 235)			_hx_tmp2 = (this->dialogueStarted == true);
            		}
            		else {
HXLINE( 235)			_hx_tmp2 = false;
            		}
HXDLIN( 235)		if (_hx_tmp2) {
HXLINE( 235)			_hx_tmp1 = !(this->noMore);
            		}
            		else {
HXLINE( 235)			_hx_tmp1 = false;
            		}
HXDLIN( 235)		if (_hx_tmp1) {
HXLINE( 237)			this->remove(this->dialogue,null());
HXLINE( 239)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 239)			_hx_tmp->play(::Paths_obj::sound(HX_("clickText",15,39,f9,2b),null()),((Float)0.8),null(),null(),null(),null());
HXLINE( 241)			bool _hx_tmp1;
HXDLIN( 241)			if (::hx::IsNull( this->dialogueList->__get(1) )) {
HXLINE( 241)				_hx_tmp1 = ::hx::IsNotNull( this->dialogueList->__get(0) );
            			}
            			else {
HXLINE( 241)				_hx_tmp1 = false;
            			}
HXDLIN( 241)			if (_hx_tmp1) {
HXLINE( 243)				if (!(this->isEnding)) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::DialogueBox,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_260_update)
HXLINE( 261)						{
HXLINE( 261)							 ::flixel::FlxSprite _g = _gthis->box;
HXDLIN( 261)							_g->set_alpha((_g->alpha - ((Float)0.2)));
            						}
HXLINE( 262)						{
HXLINE( 262)							 ::flixel::FlxSprite _g1 = _gthis->bgFade;
HXDLIN( 262)							_g1->set_alpha((_g1->alpha - ((Float)0.13999999999999999)));
            						}
HXLINE( 263)						_gthis->portraitLeft->set_visible(false);
HXLINE( 264)						_gthis->portraitRight->set_visible(false);
HXLINE( 265)						{
HXLINE( 265)							 ::flixel::addons::text::FlxTypeText _g2 = _gthis->swagDialogue;
HXDLIN( 265)							_g2->set_alpha((_g2->alpha - ((Float)0.2)));
            						}
HXLINE( 266)						_gthis->dropText->set_alpha(_gthis->swagDialogue->alpha);
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::DialogueBox,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer tmr){
            						HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_270_update)
HXLINE( 271)						_gthis->finishThing();
HXLINE( 272)						_gthis->kill();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 245)					this->isEnding = true;
HXLINE( 247)					{
HXLINE( 247)						::String _g = ( (::String)(::PlayState_obj::SONG->__Field(HX_("song",d5,23,58,4c),::hx::paccDynamic)) ).toLowerCase();
HXDLIN( 247)						::String _hx_switch_0 = _g;
            						if (  (_hx_switch_0==HX_("baby-blue",31,ec,0e,e3)) ){
HXLINE( 254)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 254)							 ::Dynamic To = 0;
HXDLIN( 254)							 ::Dynamic onComplete = null();
HXDLIN( 254)							if (::hx::IsNull( To )) {
HXLINE( 254)								To = 0;
            							}
HXDLIN( 254)							if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 254)								_this->fadeTween->cancel();
            							}
HXDLIN( 254)							_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)2.2), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
HXDLIN( 254)							goto _hx_goto_4;
            						}
            						if (  (_hx_switch_0==HX_("kidz-bop",aa,9a,ff,4e)) ){
HXLINE( 252)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 252)							 ::Dynamic To = 0;
HXDLIN( 252)							 ::Dynamic onComplete = null();
HXDLIN( 252)							if (::hx::IsNull( To )) {
HXLINE( 252)								To = 0;
            							}
HXDLIN( 252)							if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 252)								_this->fadeTween->cancel();
            							}
HXDLIN( 252)							_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)2.2), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
HXDLIN( 252)							goto _hx_goto_4;
            						}
            						if (  (_hx_switch_0==HX_("nap-time",bd,58,4c,53)) ){
HXLINE( 250)							 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 250)							 ::Dynamic To = 0;
HXDLIN( 250)							 ::Dynamic onComplete = null();
HXDLIN( 250)							if (::hx::IsNull( To )) {
HXLINE( 250)								To = 0;
            							}
HXDLIN( 250)							if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 250)								_this->fadeTween->cancel();
            							}
HXDLIN( 250)							_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)2.2), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
HXDLIN( 250)							goto _hx_goto_4;
            						}
            						/* default */{
HXLINE( 255)							::String defualt = _g;
HXLINE( 256)							{
HXLINE( 256)								 ::flixel::_hx_system::FlxSound _this = ::flixel::FlxG_obj::sound->music;
HXDLIN( 256)								 ::Dynamic To = 0;
HXDLIN( 256)								 ::Dynamic onComplete = null();
HXDLIN( 256)								if (::hx::IsNull( To )) {
HXLINE( 256)									To = 0;
            								}
HXDLIN( 256)								if (::hx::IsNotNull( _this->fadeTween )) {
HXLINE( 256)									_this->fadeTween->cancel();
            								}
HXDLIN( 256)								_this->fadeTween = ::flixel::tweens::FlxTween_obj::num(_this->_volume,( (Float)(To) ),((Float)2.2), ::Dynamic(::hx::Anon_obj::Create(1)
            									->setFixed(0,HX_("onComplete",f8,d4,7e,5d),onComplete)),_this->volumeTween_dyn());
            							}
            						}
            						_hx_goto_4:;
            					}
HXLINE( 259)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.2), ::Dynamic(new _hx_Closure_0(_gthis)),5);
HXLINE( 269)					 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)1.2), ::Dynamic(new _hx_Closure_1(_gthis)),null());
            				}
            			}
            			else {
HXLINE( 278)				this->dialogueList->remove(this->dialogueList->__get(0));
HXLINE( 280)				this->portraitLeft->set_visible(false);
HXLINE( 281)				this->portraitRight->set_visible(false);
HXLINE( 283)				this->startDialogue();
            			}
            		}
HXLINE( 287)		this->super::update(elapsed);
            	}


void DialogueBox_obj::startDialogue(){
            	HX_GC_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_293_startDialogue)
HXLINE( 294)		this->cleanDialog();
HXLINE( 300)		this->swagDialogue->resetText(this->dialogueList->__get(0));
HXLINE( 301)		this->swagDialogue->start(((Float)0.04),true,null(),null(),null());
HXLINE( 303)		::String _hx_switch_0 = this->curCharacter;
            		if (  (_hx_switch_0==HX_("baby",56,d9,10,41)) ){
HXLINE( 346)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 346)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 346)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 347)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 347)			int Alpha = 255;
HXDLIN( 347)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 347)			{
HXLINE( 347)				color = (color & -16711681);
HXDLIN( 347)				color = (color | 1703936);
            			}
HXDLIN( 347)			{
HXLINE( 347)				color = (color & -65281);
HXDLIN( 347)				color = (color | 24576);
            			}
HXDLIN( 347)			{
HXLINE( 347)				color = (color & -256);
HXDLIN( 347)				color = (color | 237);
            			}
HXDLIN( 347)			{
HXLINE( 347)				color = (color & 16777215);
HXDLIN( 347)				int color1;
HXDLIN( 347)				if ((Alpha > 255)) {
HXLINE( 347)					color1 = 255;
            				}
            				else {
HXLINE( 347)					if ((Alpha < 0)) {
HXLINE( 347)						color1 = 0;
            					}
            					else {
HXLINE( 347)						color1 = Alpha;
            					}
            				}
HXDLIN( 347)				color = (color | (color1 << 24));
            			}
HXDLIN( 347)			_hx_tmp2->set_color(color);
HXLINE( 348)			this->portraitRight->set_visible(false);
HXLINE( 349)			if (!(this->portraitLeft->visible)) {
HXLINE( 351)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 351)				::String library = null();
HXDLIN( 351)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 351)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 352)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("baby port",8b,a2,1c,70),24,false,null(),null());
HXLINE( 353)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 354)				this->portraitLeft->set_antialiasing(true);
HXLINE( 355)				this->portraitLeft->updateHitbox();
HXLINE( 356)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 359)				this->portraitLeft->set_x((this->box->x + 64));
HXLINE( 360)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 362)				this->portraitLeft->set_visible(true);
HXLINE( 363)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 345)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("bf",c4,55,00,00)) ){
HXLINE( 306)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 306)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 306)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 307)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 307)			int Alpha = 255;
HXDLIN( 307)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 307)			{
HXLINE( 307)				color = (color & -16711681);
HXDLIN( 307)				color = (color | 5242880);
            			}
HXDLIN( 307)			{
HXLINE( 307)				color = (color & -65281);
HXDLIN( 307)				color = (color | 42240);
            			}
HXDLIN( 307)			{
HXLINE( 307)				color = (color & -256);
HXDLIN( 307)				color = (color | 235);
            			}
HXDLIN( 307)			{
HXLINE( 307)				color = (color & 16777215);
HXDLIN( 307)				int color1;
HXDLIN( 307)				if ((Alpha > 255)) {
HXLINE( 307)					color1 = 255;
            				}
            				else {
HXLINE( 307)					if ((Alpha < 0)) {
HXLINE( 307)						color1 = 0;
            					}
            					else {
HXLINE( 307)						color1 = Alpha;
            					}
            				}
HXDLIN( 307)				color = (color | (color1 << 24));
            			}
HXDLIN( 307)			_hx_tmp2->set_color(color);
HXLINE( 308)			this->portraitLeft->set_visible(false);
HXLINE( 309)			if (!(this->portraitRight->visible)) {
HXLINE( 311)				 ::flixel::FlxSprite _hx_tmp = this->portraitRight;
HXDLIN( 311)				::String library = null();
HXDLIN( 311)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 311)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 312)				this->portraitRight->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("boyfriend port",f7,89,16,79),24,false,null(),null());
HXLINE( 313)				this->portraitRight->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 314)				this->portraitRight->set_antialiasing(true);
HXLINE( 315)				this->portraitRight->updateHitbox();
HXLINE( 316)				this->portraitRight->scrollFactor->set(null(),null());
HXLINE( 319)				 ::flixel::FlxSprite _hx_tmp2 = this->portraitRight;
HXDLIN( 319)				Float _hx_tmp3 = this->box->x;
HXDLIN( 319)				Float _hx_tmp4 = (_hx_tmp3 + this->box->get_width());
HXDLIN( 319)				_hx_tmp2->set_x(((_hx_tmp4 - this->portraitRight->get_width()) - ( (Float)(90) )));
HXLINE( 320)				this->portraitRight->set_y((this->box->y + -225));
HXLINE( 322)				this->portraitRight->set_visible(true);
HXLINE( 323)				this->portraitRight->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 305)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("bob",f5,bd,4a,00)) ){
HXLINE( 426)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 426)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 426)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 427)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 427)			int Alpha = 255;
HXDLIN( 427)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 427)			{
HXLINE( 427)				color = (color & -16711681);
HXDLIN( 427)				color = (color | 1703936);
            			}
HXDLIN( 427)			{
HXLINE( 427)				color = (color & -65281);
HXDLIN( 427)				color = (color | 24576);
            			}
HXDLIN( 427)			{
HXLINE( 427)				color = (color & -256);
HXDLIN( 427)				color = (color | 237);
            			}
HXDLIN( 427)			{
HXLINE( 427)				color = (color & 16777215);
HXDLIN( 427)				int color1;
HXDLIN( 427)				if ((Alpha > 255)) {
HXLINE( 427)					color1 = 255;
            				}
            				else {
HXLINE( 427)					if ((Alpha < 0)) {
HXLINE( 427)						color1 = 0;
            					}
            					else {
HXLINE( 427)						color1 = Alpha;
            					}
            				}
HXDLIN( 427)				color = (color | (color1 << 24));
            			}
HXDLIN( 427)			_hx_tmp2->set_color(color);
HXLINE( 428)			this->portraitRight->set_visible(false);
HXLINE( 429)			if (!(this->portraitLeft->visible)) {
HXLINE( 431)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 431)				::String library = null();
HXDLIN( 431)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 431)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 432)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("bob port",8c,9d,46,d3),24,false,null(),null());
HXLINE( 433)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 434)				this->portraitLeft->set_antialiasing(true);
HXLINE( 435)				this->portraitLeft->updateHitbox();
HXLINE( 436)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 439)				this->portraitLeft->set_x((this->box->x + 64));
HXLINE( 440)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 442)				this->portraitLeft->set_visible(true);
HXLINE( 443)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 425)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("dream-baby",60,e3,1f,1e)) ){
HXLINE( 326)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 326)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 326)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 327)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 327)			int Alpha = 255;
HXDLIN( 327)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 327)			{
HXLINE( 327)				color = (color & -16711681);
HXDLIN( 327)				color = (color | 5242880);
            			}
HXDLIN( 327)			{
HXLINE( 327)				color = (color & -65281);
HXDLIN( 327)				color = (color | 42240);
            			}
HXDLIN( 327)			{
HXLINE( 327)				color = (color & -256);
HXDLIN( 327)				color = (color | 235);
            			}
HXDLIN( 327)			{
HXLINE( 327)				color = (color & 16777215);
HXDLIN( 327)				int color1;
HXDLIN( 327)				if ((Alpha > 255)) {
HXLINE( 327)					color1 = 255;
            				}
            				else {
HXLINE( 327)					if ((Alpha < 0)) {
HXLINE( 327)						color1 = 0;
            					}
            					else {
HXLINE( 327)						color1 = Alpha;
            					}
            				}
HXDLIN( 327)				color = (color | (color1 << 24));
            			}
HXDLIN( 327)			_hx_tmp2->set_color(color);
HXLINE( 328)			this->portraitLeft->set_visible(false);
HXLINE( 329)			if (!(this->portraitRight->visible)) {
HXLINE( 331)				 ::flixel::FlxSprite _hx_tmp = this->portraitRight;
HXDLIN( 331)				::String library = null();
HXDLIN( 331)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 331)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 332)				this->portraitRight->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("player baby port",0c,ed,de,87),24,false,null(),null());
HXLINE( 333)				this->portraitRight->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 334)				this->portraitRight->set_antialiasing(true);
HXLINE( 335)				this->portraitRight->updateHitbox();
HXLINE( 336)				this->portraitRight->scrollFactor->set(null(),null());
HXLINE( 339)				 ::flixel::FlxSprite _hx_tmp2 = this->portraitRight;
HXDLIN( 339)				Float _hx_tmp3 = this->box->x;
HXDLIN( 339)				Float _hx_tmp4 = (_hx_tmp3 + this->box->get_width());
HXDLIN( 339)				_hx_tmp2->set_x(((_hx_tmp4 - this->portraitRight->get_width()) - ( (Float)(90) )));
HXLINE( 340)				this->portraitRight->set_y((this->box->y + -225));
HXLINE( 342)				this->portraitRight->set_visible(true);
HXLINE( 343)				this->portraitRight->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 325)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("evil-baby",ef,a8,70,fd)) ){
HXLINE( 366)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 366)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 366)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 367)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 367)			int Alpha = 255;
HXDLIN( 367)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 367)			{
HXLINE( 367)				color = (color & -16711681);
HXDLIN( 367)				color = (color | 1703936);
            			}
HXDLIN( 367)			{
HXLINE( 367)				color = (color & -65281);
HXDLIN( 367)				color = (color | 24576);
            			}
HXDLIN( 367)			{
HXLINE( 367)				color = (color & -256);
HXDLIN( 367)				color = (color | 237);
            			}
HXDLIN( 367)			{
HXLINE( 367)				color = (color & 16777215);
HXDLIN( 367)				int color1;
HXDLIN( 367)				if ((Alpha > 255)) {
HXLINE( 367)					color1 = 255;
            				}
            				else {
HXLINE( 367)					if ((Alpha < 0)) {
HXLINE( 367)						color1 = 0;
            					}
            					else {
HXLINE( 367)						color1 = Alpha;
            					}
            				}
HXDLIN( 367)				color = (color | (color1 << 24));
            			}
HXDLIN( 367)			_hx_tmp2->set_color(color);
HXLINE( 368)			this->portraitRight->set_visible(false);
HXLINE( 369)			if (!(this->portraitLeft->visible)) {
HXLINE( 371)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 371)				::String library = null();
HXDLIN( 371)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 371)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 372)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("evil baby port",ff,91,e0,c3),24,false,null(),null());
HXLINE( 373)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 374)				this->portraitLeft->set_antialiasing(true);
HXLINE( 375)				this->portraitLeft->updateHitbox();
HXLINE( 376)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 379)				this->portraitLeft->set_x((this->box->x + 64));
HXLINE( 380)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 382)				this->portraitLeft->set_visible(true);
HXLINE( 383)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 365)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("goblin",57,c6,55,59)) ){
HXLINE( 386)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 386)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 386)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 387)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 387)			int Alpha = 255;
HXDLIN( 387)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 387)			{
HXLINE( 387)				color = (color & -16711681);
HXDLIN( 387)				color = (color | 1703936);
            			}
HXDLIN( 387)			{
HXLINE( 387)				color = (color & -65281);
HXDLIN( 387)				color = (color | 24576);
            			}
HXDLIN( 387)			{
HXLINE( 387)				color = (color & -256);
HXDLIN( 387)				color = (color | 237);
            			}
HXDLIN( 387)			{
HXLINE( 387)				color = (color & 16777215);
HXDLIN( 387)				int color1;
HXDLIN( 387)				if ((Alpha > 255)) {
HXLINE( 387)					color1 = 255;
            				}
            				else {
HXLINE( 387)					if ((Alpha < 0)) {
HXLINE( 387)						color1 = 0;
            					}
            					else {
HXLINE( 387)						color1 = Alpha;
            					}
            				}
HXDLIN( 387)				color = (color | (color1 << 24));
            			}
HXDLIN( 387)			_hx_tmp2->set_color(color);
HXLINE( 388)			this->portraitRight->set_visible(false);
HXLINE( 389)			if (!(this->portraitLeft->visible)) {
HXLINE( 391)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 391)				::String library = null();
HXDLIN( 391)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 391)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 392)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("goblin port",ea,f1,37,dc),24,false,null(),null());
HXLINE( 393)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 394)				this->portraitLeft->set_antialiasing(true);
HXLINE( 395)				this->portraitLeft->updateHitbox();
HXLINE( 396)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 399)				this->portraitLeft->set_x((this->box->x + 50));
HXLINE( 400)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 402)				this->portraitLeft->set_visible(true);
HXLINE( 403)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 385)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("lol",89,54,52,00)) ){
HXLINE( 406)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 406)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 406)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 407)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 407)			int Alpha = 255;
HXDLIN( 407)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 407)			{
HXLINE( 407)				color = (color & -16711681);
HXDLIN( 407)				color = (color | 1703936);
            			}
HXDLIN( 407)			{
HXLINE( 407)				color = (color & -65281);
HXDLIN( 407)				color = (color | 24576);
            			}
HXDLIN( 407)			{
HXLINE( 407)				color = (color & -256);
HXDLIN( 407)				color = (color | 237);
            			}
HXDLIN( 407)			{
HXLINE( 407)				color = (color & 16777215);
HXDLIN( 407)				int color1;
HXDLIN( 407)				if ((Alpha > 255)) {
HXLINE( 407)					color1 = 255;
            				}
            				else {
HXLINE( 407)					if ((Alpha < 0)) {
HXLINE( 407)						color1 = 0;
            					}
            					else {
HXLINE( 407)						color1 = Alpha;
            					}
            				}
HXDLIN( 407)				color = (color | (color1 << 24));
            			}
HXDLIN( 407)			_hx_tmp2->set_color(color);
HXLINE( 408)			this->portraitRight->set_visible(false);
HXLINE( 409)			if (!(this->portraitLeft->visible)) {
HXLINE( 411)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 411)				::String library = null();
HXDLIN( 411)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 411)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 412)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("lol port",78,ae,d0,0e),24,false,null(),null());
HXLINE( 413)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 414)				this->portraitLeft->set_antialiasing(true);
HXLINE( 415)				this->portraitLeft->updateHitbox();
HXLINE( 416)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 419)				this->portraitLeft->set_x((this->box->x + 64));
HXLINE( 420)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 422)				this->portraitLeft->set_visible(true);
HXLINE( 423)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 405)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("og-bob",00,25,ec,cd)) ){
HXLINE( 466)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 466)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 466)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 467)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 467)			int Alpha = 255;
HXDLIN( 467)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 467)			{
HXLINE( 467)				color = (color & -16711681);
HXDLIN( 467)				color = (color | 1703936);
            			}
HXDLIN( 467)			{
HXLINE( 467)				color = (color & -65281);
HXDLIN( 467)				color = (color | 24576);
            			}
HXDLIN( 467)			{
HXLINE( 467)				color = (color & -256);
HXDLIN( 467)				color = (color | 237);
            			}
HXDLIN( 467)			{
HXLINE( 467)				color = (color & 16777215);
HXDLIN( 467)				int color1;
HXDLIN( 467)				if ((Alpha > 255)) {
HXLINE( 467)					color1 = 255;
            				}
            				else {
HXLINE( 467)					if ((Alpha < 0)) {
HXLINE( 467)						color1 = 0;
            					}
            					else {
HXLINE( 467)						color1 = Alpha;
            					}
            				}
HXDLIN( 467)				color = (color | (color1 << 24));
            			}
HXDLIN( 467)			_hx_tmp2->set_color(color);
HXLINE( 468)			this->portraitRight->set_visible(false);
HXLINE( 469)			if (!(this->portraitLeft->visible)) {
HXLINE( 471)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 471)				::String library = null();
HXDLIN( 471)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 471)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 472)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("normal bob port",a5,4e,a4,a0),24,false,null(),null());
HXLINE( 473)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 474)				this->portraitLeft->set_antialiasing(true);
HXLINE( 475)				this->portraitLeft->updateHitbox();
HXLINE( 476)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 479)				this->portraitLeft->set_x((this->box->x + 64));
HXLINE( 480)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 482)				this->portraitLeft->set_visible(true);
HXLINE( 483)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 465)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("ron",11,e2,56,00)) ){
HXLINE( 446)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 446)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 446)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 447)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 447)			int Alpha = 255;
HXDLIN( 447)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 447)			{
HXLINE( 447)				color = (color & -16711681);
HXDLIN( 447)				color = (color | 1703936);
            			}
HXDLIN( 447)			{
HXLINE( 447)				color = (color & -65281);
HXDLIN( 447)				color = (color | 24576);
            			}
HXDLIN( 447)			{
HXLINE( 447)				color = (color & -256);
HXDLIN( 447)				color = (color | 237);
            			}
HXDLIN( 447)			{
HXLINE( 447)				color = (color & 16777215);
HXDLIN( 447)				int color1;
HXDLIN( 447)				if ((Alpha > 255)) {
HXLINE( 447)					color1 = 255;
            				}
            				else {
HXLINE( 447)					if ((Alpha < 0)) {
HXLINE( 447)						color1 = 0;
            					}
            					else {
HXLINE( 447)						color1 = Alpha;
            					}
            				}
HXDLIN( 447)				color = (color | (color1 << 24));
            			}
HXDLIN( 447)			_hx_tmp2->set_color(color);
HXLINE( 448)			this->portraitRight->set_visible(false);
HXLINE( 449)			if (!(this->portraitLeft->visible)) {
HXLINE( 451)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 451)				::String library = null();
HXDLIN( 451)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 451)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 452)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("ron port",f0,13,b6,32),24,false,null(),null());
HXLINE( 453)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 454)				this->portraitLeft->set_antialiasing(true);
HXLINE( 455)				this->portraitLeft->updateHitbox();
HXLINE( 456)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 459)				this->portraitLeft->set_x((this->box->x + 64));
HXLINE( 460)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 462)				this->portraitLeft->set_visible(true);
HXLINE( 463)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 445)			goto _hx_goto_8;
            		}
            		if (  (_hx_switch_0==HX_("video",7b,14,fc,36)) ){
HXLINE( 486)			 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN( 486)			 ::flixel::_hx_system::FlxSound _hx_tmp1 = _hx_tmp->load(::Paths_obj::sound(HX_("pixelText",53,7a,83,06),null()),1,null(),null(),null(),null(),null(),null(),null());
HXDLIN( 486)			this->swagDialogue->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp1);
HXLINE( 487)			 ::flixel::addons::text::FlxTypeText _hx_tmp2 = this->swagDialogue;
HXDLIN( 487)			int Alpha = 255;
HXDLIN( 487)			int color = ::flixel::util::_FlxColor::FlxColor_Impl__obj::_new(null());
HXDLIN( 487)			{
HXLINE( 487)				color = (color & -16711681);
HXDLIN( 487)				color = (color | 1703936);
            			}
HXDLIN( 487)			{
HXLINE( 487)				color = (color & -65281);
HXDLIN( 487)				color = (color | 24576);
            			}
HXDLIN( 487)			{
HXLINE( 487)				color = (color & -256);
HXDLIN( 487)				color = (color | 237);
            			}
HXDLIN( 487)			{
HXLINE( 487)				color = (color & 16777215);
HXDLIN( 487)				int color1;
HXDLIN( 487)				if ((Alpha > 255)) {
HXLINE( 487)					color1 = 255;
            				}
            				else {
HXLINE( 487)					if ((Alpha < 0)) {
HXLINE( 487)						color1 = 0;
            					}
            					else {
HXLINE( 487)						color1 = Alpha;
            					}
            				}
HXDLIN( 487)				color = (color | (color1 << 24));
            			}
HXDLIN( 487)			_hx_tmp2->set_color(color);
HXLINE( 488)			this->portraitRight->set_visible(false);
HXLINE( 489)			if (!(this->portraitLeft->visible)) {
HXLINE( 491)				 ::flixel::FlxSprite _hx_tmp = this->portraitLeft;
HXDLIN( 491)				::String library = null();
HXDLIN( 491)				::String _hx_tmp1 = ::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),library);
HXDLIN( 491)				_hx_tmp->set_frames(::flixel::graphics::frames::FlxAtlasFrames_obj::fromSparrow(_hx_tmp1,::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("dialogue/ports",5b,92,d3,4b)) + HX_(".xml",69,3e,c3,1e)),HX_("TEXT",ad,94,ba,37),library)));
HXLINE( 492)				this->portraitLeft->animation->addByPrefix(HX_("enter",18,6d,86,70),HX_("normal bob port",a5,4e,a4,a0),24,false,null(),null());
HXLINE( 493)				this->portraitLeft->scale->set(((Float)1.3),((Float)1.3));
HXLINE( 494)				this->portraitLeft->set_antialiasing(true);
HXLINE( 495)				this->portraitLeft->updateHitbox();
HXLINE( 496)				this->portraitLeft->scrollFactor->set(null(),null());
HXLINE( 499)				this->portraitLeft->set_x((this->box->x + 64));
HXLINE( 500)				this->portraitLeft->set_y((this->box->y - ( (Float)(196) )));
HXLINE( 501)				this->noMore = true;
HXLINE( 502)				this->portraitLeft->set_visible(false);
HXLINE( 503)				this->box->set_visible(false);
HXLINE( 504)				this->portraitLeft->animation->play(HX_("enter",18,6d,86,70),null(),null(),null());
            			}
HXLINE( 506)			if ((::PlayState_obj::videoDialogue == 1)) {
HXLINE( 508)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN( 508)				::PlayState_obj::videoDialogue = (::PlayState_obj::videoDialogue + 1);
HXLINE( 509)				{
HXLINE( 509)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::VideoState_obj::__alloc( HX_CTX ,((((HX_("assets/videos/",cb,c4,dd,db) + HX_("bobcut3",e6,a8,e2,fb)) + HX_("/",2f,00,00,00)) + HX_("bobcut3",e6,a8,e2,fb)) + HX_(".webm",87,0c,64,cb)), ::PlayState_obj::__alloc( HX_CTX ,null(),null()))) ),false);
HXDLIN( 509)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 509)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE( 511)			if ((::PlayState_obj::videoDialogue == 2)) {
HXLINE( 513)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::PlayState >();
HXDLIN( 513)				::PlayState_obj::videoDialogue = (::PlayState_obj::videoDialogue + 1);
HXLINE( 514)				{
HXLINE( 514)					 ::flixel::FlxState nextState = ::LoadingState_obj::getNextState(( ( ::flixel::FlxState)( ::VideoState_obj::__alloc( HX_CTX ,((((HX_("assets/videos/",cb,c4,dd,db) + HX_("bobcut3",e6,a8,e2,fb)) + HX_("/",2f,00,00,00)) + HX_("bobcut3",e6,a8,e2,fb)) + HX_(".webm",87,0c,64,cb)), ::PlayState_obj::__alloc( HX_CTX ,null(),null()))) ),false);
HXDLIN( 514)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 514)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
HXLINE( 485)			goto _hx_goto_8;
            		}
            		_hx_goto_8:;
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueBox_obj,startDialogue,(void))

void DialogueBox_obj::cleanDialog(){
            	HX_STACKFRAME(&_hx_pos_abff9fa8c13cc7a0_521_cleanDialog)
HXLINE( 522)		::Array< ::String > splitName = this->dialogueList->__get(0).split(HX_(":",3a,00,00,00));
HXLINE( 523)		this->curCharacter = splitName->__get(1);
HXLINE( 524)		this->dialogueList[0] = ::StringTools_obj::trim(this->dialogueList->__get(0).substr((splitName->__get(1).length + 2),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DialogueBox_obj,cleanDialog,(void))


::hx::ObjectPtr< DialogueBox_obj > DialogueBox_obj::__new(::hx::Null< bool >  __o_talkingRight,::Array< ::String > dialogueList) {
	::hx::ObjectPtr< DialogueBox_obj > __this = new DialogueBox_obj();
	__this->__construct(__o_talkingRight,dialogueList);
	return __this;
}

::hx::ObjectPtr< DialogueBox_obj > DialogueBox_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_talkingRight,::Array< ::String > dialogueList) {
	DialogueBox_obj *__this = (DialogueBox_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(DialogueBox_obj), true, "DialogueBox"));
	*(void **)__this = DialogueBox_obj::_hx_vtable;
	__this->__construct(__o_talkingRight,dialogueList);
	return __this;
}

DialogueBox_obj::DialogueBox_obj()
{
}

void DialogueBox_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DialogueBox);
	HX_MARK_MEMBER_NAME(box,"box");
	HX_MARK_MEMBER_NAME(curCharacter,"curCharacter");
	HX_MARK_MEMBER_NAME(dialogue,"dialogue");
	HX_MARK_MEMBER_NAME(dialogueList,"dialogueList");
	HX_MARK_MEMBER_NAME(swagDialogue,"swagDialogue");
	HX_MARK_MEMBER_NAME(dropText,"dropText");
	HX_MARK_MEMBER_NAME(finishThing,"finishThing");
	HX_MARK_MEMBER_NAME(portraitLeft,"portraitLeft");
	HX_MARK_MEMBER_NAME(portraitRight,"portraitRight");
	HX_MARK_MEMBER_NAME(handSelect,"handSelect");
	HX_MARK_MEMBER_NAME(bgFade,"bgFade");
	HX_MARK_MEMBER_NAME(noMore,"noMore");
	HX_MARK_MEMBER_NAME(dialogueOpened,"dialogueOpened");
	HX_MARK_MEMBER_NAME(dialogueStarted,"dialogueStarted");
	HX_MARK_MEMBER_NAME(isEnding,"isEnding");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void DialogueBox_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(box,"box");
	HX_VISIT_MEMBER_NAME(curCharacter,"curCharacter");
	HX_VISIT_MEMBER_NAME(dialogue,"dialogue");
	HX_VISIT_MEMBER_NAME(dialogueList,"dialogueList");
	HX_VISIT_MEMBER_NAME(swagDialogue,"swagDialogue");
	HX_VISIT_MEMBER_NAME(dropText,"dropText");
	HX_VISIT_MEMBER_NAME(finishThing,"finishThing");
	HX_VISIT_MEMBER_NAME(portraitLeft,"portraitLeft");
	HX_VISIT_MEMBER_NAME(portraitRight,"portraitRight");
	HX_VISIT_MEMBER_NAME(handSelect,"handSelect");
	HX_VISIT_MEMBER_NAME(bgFade,"bgFade");
	HX_VISIT_MEMBER_NAME(noMore,"noMore");
	HX_VISIT_MEMBER_NAME(dialogueOpened,"dialogueOpened");
	HX_VISIT_MEMBER_NAME(dialogueStarted,"dialogueStarted");
	HX_VISIT_MEMBER_NAME(isEnding,"isEnding");
	 ::flixel::group::FlxTypedSpriteGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val DialogueBox_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { return ::hx::Val( box ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgFade") ) { return ::hx::Val( bgFade ); }
		if (HX_FIELD_EQ(inName,"noMore") ) { return ::hx::Val( noMore ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogue") ) { return ::hx::Val( dialogue ); }
		if (HX_FIELD_EQ(inName,"dropText") ) { return ::hx::Val( dropText ); }
		if (HX_FIELD_EQ(inName,"isEnding") ) { return ::hx::Val( isEnding ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"handSelect") ) { return ::hx::Val( handSelect ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"finishThing") ) { return ::hx::Val( finishThing ); }
		if (HX_FIELD_EQ(inName,"cleanDialog") ) { return ::hx::Val( cleanDialog_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curCharacter") ) { return ::hx::Val( curCharacter ); }
		if (HX_FIELD_EQ(inName,"dialogueList") ) { return ::hx::Val( dialogueList ); }
		if (HX_FIELD_EQ(inName,"swagDialogue") ) { return ::hx::Val( swagDialogue ); }
		if (HX_FIELD_EQ(inName,"portraitLeft") ) { return ::hx::Val( portraitLeft ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"portraitRight") ) { return ::hx::Val( portraitRight ); }
		if (HX_FIELD_EQ(inName,"startDialogue") ) { return ::hx::Val( startDialogue_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dialogueOpened") ) { return ::hx::Val( dialogueOpened ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dialogueStarted") ) { return ::hx::Val( dialogueStarted ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val DialogueBox_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgFade") ) { bgFade=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noMore") ) { noMore=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dialogue") ) { dialogue=inValue.Cast<  ::Alphabet >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dropText") ) { dropText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"isEnding") ) { isEnding=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"handSelect") ) { handSelect=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"finishThing") ) { finishThing=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"curCharacter") ) { curCharacter=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dialogueList") ) { dialogueList=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"swagDialogue") ) { swagDialogue=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"portraitLeft") ) { portraitLeft=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"portraitRight") ) { portraitRight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"dialogueOpened") ) { dialogueOpened=inValue.Cast< bool >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dialogueStarted") ) { dialogueStarted=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DialogueBox_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("box",0b,be,4a,00));
	outFields->push(HX_("curCharacter",09,86,7c,d7));
	outFields->push(HX_("dialogue",18,2d,94,a7));
	outFields->push(HX_("dialogueList",96,e1,d8,0d));
	outFields->push(HX_("swagDialogue",c2,ad,00,ad));
	outFields->push(HX_("dropText",7c,74,94,f2));
	outFields->push(HX_("portraitLeft",02,9f,53,0d));
	outFields->push(HX_("portraitRight",81,90,e4,12));
	outFields->push(HX_("handSelect",cb,77,90,7c));
	outFields->push(HX_("bgFade",e1,fd,cd,ab));
	outFields->push(HX_("noMore",76,20,f6,17));
	outFields->push(HX_("dialogueOpened",e1,e5,9f,10));
	outFields->push(HX_("dialogueStarted",09,77,22,70));
	outFields->push(HX_("isEnding",71,3f,f2,52));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo DialogueBox_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,box),HX_("box",0b,be,4a,00)},
	{::hx::fsString,(int)offsetof(DialogueBox_obj,curCharacter),HX_("curCharacter",09,86,7c,d7)},
	{::hx::fsObject /*  ::Alphabet */ ,(int)offsetof(DialogueBox_obj,dialogue),HX_("dialogue",18,2d,94,a7)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(DialogueBox_obj,dialogueList),HX_("dialogueList",96,e1,d8,0d)},
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(DialogueBox_obj,swagDialogue),HX_("swagDialogue",c2,ad,00,ad)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(DialogueBox_obj,dropText),HX_("dropText",7c,74,94,f2)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(DialogueBox_obj,finishThing),HX_("finishThing",9b,aa,8e,36)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,portraitLeft),HX_("portraitLeft",02,9f,53,0d)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,portraitRight),HX_("portraitRight",81,90,e4,12)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,handSelect),HX_("handSelect",cb,77,90,7c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(DialogueBox_obj,bgFade),HX_("bgFade",e1,fd,cd,ab)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,noMore),HX_("noMore",76,20,f6,17)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,dialogueOpened),HX_("dialogueOpened",e1,e5,9f,10)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,dialogueStarted),HX_("dialogueStarted",09,77,22,70)},
	{::hx::fsBool,(int)offsetof(DialogueBox_obj,isEnding),HX_("isEnding",71,3f,f2,52)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *DialogueBox_obj_sStaticStorageInfo = 0;
#endif

static ::String DialogueBox_obj_sMemberFields[] = {
	HX_("box",0b,be,4a,00),
	HX_("curCharacter",09,86,7c,d7),
	HX_("dialogue",18,2d,94,a7),
	HX_("dialogueList",96,e1,d8,0d),
	HX_("swagDialogue",c2,ad,00,ad),
	HX_("dropText",7c,74,94,f2),
	HX_("finishThing",9b,aa,8e,36),
	HX_("portraitLeft",02,9f,53,0d),
	HX_("portraitRight",81,90,e4,12),
	HX_("handSelect",cb,77,90,7c),
	HX_("bgFade",e1,fd,cd,ab),
	HX_("noMore",76,20,f6,17),
	HX_("dialogueOpened",e1,e5,9f,10),
	HX_("dialogueStarted",09,77,22,70),
	HX_("update",09,86,05,87),
	HX_("isEnding",71,3f,f2,52),
	HX_("startDialogue",9a,8f,4f,ac),
	HX_("cleanDialog",31,37,ca,9e),
	::String(null()) };

::hx::Class DialogueBox_obj::__mClass;

void DialogueBox_obj::__register()
{
	DialogueBox_obj _hx_dummy;
	DialogueBox_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("DialogueBox",b3,1f,c8,ff);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(DialogueBox_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< DialogueBox_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DialogueBox_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DialogueBox_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

