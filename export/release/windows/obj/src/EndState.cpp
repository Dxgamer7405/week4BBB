// Generated by Haxe 4.1.5
#include <hxcpp.h>

#ifndef INCLUDED_EndState
#include <EndState.h>
#endif
#ifndef INCLUDED_MusicBeatState
#include <MusicBeatState.h>
#endif
#ifndef INCLUDED_Paths
#include <Paths.h>
#endif
#ifndef INCLUDED_StoryMenuState
#include <StoryMenuState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_FlxTransitionableState
#include <flixel/addons/transition/FlxTransitionableState.h>
#endif
#ifndef INCLUDED_flixel_addons_transition_TransitionData
#include <flixel/addons/transition/TransitionData.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_FlxUIState
#include <flixel/addons/ui/FlxUIState.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IEventGetter
#include <flixel/addons/ui/interfaces/IEventGetter.h>
#endif
#ifndef INCLUDED_flixel_addons_ui_interfaces_IFlxUIState
#include <flixel/addons/ui/interfaces/IFlxUIState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e702e9e534df4187_17_new,"EndState","new",0xed9e4848,"EndState.new","EndState.hx",17,0xfb535828)
HX_LOCAL_STACK_FRAME(_hx_pos_e702e9e534df4187_21_create,"EndState","create",0xbac2d014,"EndState.create","EndState.hx",21,0xfb535828)
HX_LOCAL_STACK_FRAME(_hx_pos_e702e9e534df4187_31_update,"EndState","update",0xc5b8ef21,"EndState.update","EndState.hx",31,0xfb535828)

void EndState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_e702e9e534df4187_17_new)
HXDLIN(  17)		super::__construct(null());
            	}

Dynamic EndState_obj::__CreateEmpty() { return new EndState_obj; }

void *EndState_obj::_hx_vtable = 0;

Dynamic EndState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< EndState_obj > _hx_result = new EndState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool EndState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0e2d9c7a) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0e2d9c7a;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void EndState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_e702e9e534df4187_21_create)
HXLINE(  22)		 ::flixel::FlxSprite bg =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  24)		bg->loadGraphic(::Paths_obj::getPath(((HX_("images/",77,50,74,c1) + HX_("shitling",b6,c7,08,a4)) + HX_(".png",3b,2d,bd,1e)),HX_("IMAGE",3b,57,57,3b),HX_("shared",a5,5e,2b,1d)),null(),null(),null(),null(),null());
HXLINE(  25)		bg->set_antialiasing(true);
HXLINE(  26)		this->add(bg);
HXLINE(  27)		 ::flixel::_hx_system::frontEnds::SoundFrontEnd _hx_tmp = ::flixel::FlxG_obj::sound;
HXDLIN(  27)		_hx_tmp->playMusic(::Paths_obj::getPath((((HX_("music/",ea,bf,1b,3f) + HX_("eilot",ad,52,32,6d)) + HX_(".",2e,00,00,00)) + HX_("ogg",4f,94,54,00)),HX_("MUSIC",85,08,49,8e),HX_("shared",a5,5e,2b,1d)),1,false,null());
HXLINE(  28)		this->get_camera()->flash(-16777216,1,null(),null());
            	}


void EndState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_e702e9e534df4187_31_update)
HXLINE(  32)		this->super::update(elapsed);
HXLINE(  34)		 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->pressed) );
HXDLIN(  34)		if (_this->keyManager->checkStatus(13,_this->status)) {
HXLINE(  36)			 ::flixel::FlxState nextState =  ::StoryMenuState_obj::__alloc( HX_CTX ,null(),null());
HXDLIN(  36)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  36)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
            	}



::hx::ObjectPtr< EndState_obj > EndState_obj::__new() {
	::hx::ObjectPtr< EndState_obj > __this = new EndState_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< EndState_obj > EndState_obj::__alloc(::hx::Ctx *_hx_ctx) {
	EndState_obj *__this = (EndState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(EndState_obj), true, "EndState"));
	*(void **)__this = EndState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

EndState_obj::EndState_obj()
{
}

::hx::Val EndState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *EndState_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *EndState_obj_sStaticStorageInfo = 0;
#endif

static ::String EndState_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class EndState_obj::__mClass;

void EndState_obj::__register()
{
	EndState_obj _hx_dummy;
	EndState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("EndState",56,c4,ba,5b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(EndState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< EndState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = EndState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = EndState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

